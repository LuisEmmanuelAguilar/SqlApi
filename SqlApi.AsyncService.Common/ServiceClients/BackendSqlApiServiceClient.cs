//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Company.NSwag.Client;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Company.NXT.SqlApi.AsyncService.Common.ServiceClients.BackendSqlApiService
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBackendSqlApiServiceClient : Company.NSwag.Client.IClientBase
    {
        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body);

        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, System.Threading.CancellationToken cancellationToken);

        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, ServiceClientRequestOptions serviceClientRequestOptions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(System.Threading.CancellationToken cancellationToken);

        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(ServiceClientRequestOptions serviceClientRequestOptions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetLegacyUserIDAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(System.Threading.CancellationToken cancellationToken);

        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(ServiceClientRequestOptions serviceClientRequestOptions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class BackendSqlApiServiceClient : Company.NSwag.Client.ClientBase, IBackendSqlApiServiceClient
    {
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

        public BackendSqlApiServiceClient(Company.NSwag.Client.ClientConfig<IBackendSqlApiServiceClient> configuration) : base(configuration)
        {
        }

        public BackendSqlApiServiceClient(Company.NSwag.Client.ClientConfig configuration) : base(configuration)
        {
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);

        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body)
        {
            return QueueCommandAsync(id, body, default(ServiceClientRequestOptions), default(System.Threading.CancellationToken));
        }

        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            return QueueCommandAsync(id, body, default(ServiceClientRequestOptions), cancellationToken);
        }

        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, ServiceClientRequestOptions serviceClientRequestOptions)
        {
            return QueueCommandAsync(id, body, serviceClientRequestOptions, default(System.Threading.CancellationToken));
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Queue a command for asynchronous processing.
        /// </remarks>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Returned when the command is successfully queued for execution.</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CommandByIdExecuteResponse> QueueCommandAsync(System.Guid id, AsyncCommandByIdExecuteRequest body, ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();

                    // Operation Path: "command/{id}/queue"
                    urlBuilder_.Append("command/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/queue");

                    await base.PrepareRequest(client_, request_, urlBuilder_, serviceClientRequestOptions).ConfigureAwait(false);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommandByIdExecuteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CommonServiceClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IEnumerable<ServiceError>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CommonServiceClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new CommonServiceClientException<System.Collections.Generic.IEnumerable<ServiceError>>("Returned when for invalid requests missing either JobId or ConsumerCallback.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CommonServiceClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync()
        {
            return MonitorFrontendAsync(default(ServiceClientRequestOptions), default(System.Threading.CancellationToken));
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(System.Threading.CancellationToken cancellationToken)
        {
            return MonitorFrontendAsync(default(ServiceClientRequestOptions), cancellationToken);
        }

        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(ServiceClientRequestOptions serviceClientRequestOptions)
        {
            return MonitorFrontendAsync(serviceClientRequestOptions, default(System.Threading.CancellationToken));
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TestResult> MonitorFrontendAsync(ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();

                    // Operation Path: "monitor/frontend"
                    urlBuilder_.Append("monitor/frontend");

                    await base.PrepareRequest(client_, request_, urlBuilder_, serviceClientRequestOptions).ConfigureAwait(false);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CommonServiceClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CommonServiceClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetLegacyUserIDAsync()
        {
            return GetLegacyUserIDAsync(default(ServiceClientRequestOptions), default(System.Threading.CancellationToken));
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(System.Threading.CancellationToken cancellationToken)
        {
            return GetLegacyUserIDAsync(default(ServiceClientRequestOptions), cancellationToken);
        }

        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(ServiceClientRequestOptions serviceClientRequestOptions)
        {
            return GetLegacyUserIDAsync(serviceClientRequestOptions, default(System.Threading.CancellationToken));
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="serviceClientRequestOptions">Optionally customize properties of the request.</param>
        /// <returns>Success</returns>
        /// <exception cref="CommonServiceClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetLegacyUserIDAsync(ServiceClientRequestOptions serviceClientRequestOptions, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();

                    // Operation Path: "tenant/legacyuserid"
                    urlBuilder_.Append("tenant/legacyuserid");

                    await base.PrepareRequest(client_, request_, urlBuilder_, serviceClientRequestOptions).ConfigureAwait(false);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CommonServiceClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CommonServiceClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CommonServiceClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CommonServiceClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class AsyncCommandByIdExecuteRequest
    {
        [Newtonsoft.Json.JsonProperty("job_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("consumer_callback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConsumerCallback { get; set; }

        [Newtonsoft.Json.JsonProperty("sql_parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, SqlParameter> SqlParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("data_set_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<DataSetOptions> DataSetOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("culture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Culture { get; set; }

        [Newtonsoft.Json.JsonProperty("installed_country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country? InstalledCountry { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class CommandByIdExecuteResponse
    {
        [Newtonsoft.Json.JsonProperty("data_set", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DataSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UK")]
        UK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ES")]
        ES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AU")]
        AU = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NZ")]
        NZ = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class DataSetOptions
    {
        [Newtonsoft.Json.JsonProperty("output_format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputFormat? OutputFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("formatting_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<FieldFormatOptions> FormattingOptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DecryptMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Decrypt")]
        Decrypt = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mask")]
        Mask = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FieldFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Legacy")]
        Legacy = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Multiline")]
        Multiline = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class FieldFormatOptions
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldFormat? Format { get; set; }

        [Newtonsoft.Json.JsonProperty("format_mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatMask { get; set; }

        [Newtonsoft.Json.JsonProperty("legacy_format_descriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegacyFormatDescriptor? LegacyFormatDescriptor { get; set; }

        [Newtonsoft.Json.JsonProperty("decrypt_mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DecryptMode? DecryptMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegacyFormatDescriptor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alpha")]
        Alpha = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Amount")]
        Amount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DateMDY")]
        DateMDY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Memo")]
        Memo = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TableEntry")]
        TableEntry = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"StaticEntry")]
        StaticEntry = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountId")]
        AccountId = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ConsAccountId")]
        ConsAccountId = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TimeInterval")]
        TimeInterval = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DateMMDD")]
        DateMMDD = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"DateMMYYYY")]
        DateMMYYYY = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNoCurrency")]
        AmountNoCurrency = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNegative")]
        AmountNegative = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberFormatted")]
        NumberFormatted = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNegativeNoCurrency")]
        AmountNegativeNoCurrency = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountThreeDecimal")]
        AmountThreeDecimal = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNegativeThreeDecimal")]
        AmountNegativeThreeDecimal = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberDecimal")]
        NumberDecimal = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Rate")]
        Rate = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RateNoMax")]
        RateNoMax = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PercentNonnegative")]
        PercentNonnegative = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"Phone")]
        Phone = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ZipCode")]
        ZipCode = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ZipCodeAlpha")]
        ZipCodeAlpha = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"SSN")]
        SSN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Fund")]
        Fund = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"Appeal")]
        Appeal = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"Campaign")]
        Campaign = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberNegative")]
        NumberNegative = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"DateFuzzy")]
        DateFuzzy = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"StaticLocalEntry")]
        StaticLocalEntry = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"State")]
        State = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberDefaultZero")]
        NumberDefaultZero = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"UserName")]
        UserName = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ConstituentRecordId")]
        ConstituentRecordId = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"GPA")]
        GPA = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"ClassOf")]
        ClassOf = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountAllowZero")]
        AmountAllowZero = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"DPC")]
        DPC = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"LOT")]
        LOT = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"TransitRouting")]
        TransitRouting = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"SortCode")]
        SortCode = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"BSB")]
        BSB = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"InstitutionId")]
        InstitutionId = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"BankNumber")]
        BankNumber = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"RatingSystemCategory")]
        RatingSystemCategory = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualRate")]
        AnnualRate = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"Encrypted")]
        Encrypted = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"DPCUK")]
        DPCUK = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"DPCAUSNZ")]
        DPCAUSNZ = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"AlphaUpper")]
        AlphaUpper = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"StaticEntryBitmask")]
        StaticEntryBitmask = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberAllowZero")]
        NumberAllowZero = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberThreeDecimalCutZeros")]
        NumberThreeDecimalCutZeros = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptedDES")]
        EncryptedDES = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"StaticLocalEntryAlpha")]
        StaticLocalEntryAlpha = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"BooleanAlpha")]
        BooleanAlpha = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"MD5")]
        MD5 = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"DateFuzzyMMDD")]
        DateFuzzyMMDD = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectId")]
        ProjectId = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountFormatZero")]
        AmountFormatZero = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNegativeFormatZero")]
        AmountNegativeFormatZero = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberZero")]
        NumberZero = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountNoCurrencyFormatZero")]
        AmountNoCurrencyFormatZero = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"PercentNonnegativeFourDecimal")]
        PercentNonnegativeFourDecimal = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberNoMax")]
        NumberNoMax = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"RateFourDecimal")]
        RateFourDecimal = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"DateYY")]
        DateYY = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"DateYYYY")]
        DateYYYY = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"DateMDYHHMM")]
        DateMDYHHMM = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"DocNum")]
        DocNum = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPassword")]
        UserPassword = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"UserSalt")]
        UserSalt = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"PIIDate")]
        PIIDate = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"RateId")]
        RateId = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"PoolId")]
        PoolId = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberDecimalUpTo5")]
        NumberDecimalUpTo5 = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"EmployeeId")]
        EmployeeId = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberThreeDecimalFormatZero")]
        NumberThreeDecimalFormatZero = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"PercentNonnegativeFiveDecimal")]
        PercentNonnegativeFiveDecimal = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberDecimalUpTo7FormatZero")]
        NumberDecimalUpTo7FormatZero = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountUpTo5FormatZero")]
        AmountUpTo5FormatZero = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"RateFourDecimalFormatZero")]
        RateFourDecimalFormatZero = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountUpTo5")]
        AmountUpTo5 = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberDecimalUpTo7")]
        NumberDecimalUpTo7 = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountUpTo4")]
        AmountUpTo4 = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountUpTo6")]
        AmountUpTo6 = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"AmountFiveDecimal")]
        AmountFiveDecimal = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"CDFA")]
        CDFA = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"DESEncrypted")]
        DESEncrypted = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountNumber")]
        AccountNumber = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxIdNumber")]
        TaxIdNumber = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferenceNumber")]
        ReferenceNumber = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingNumUS")]
        RoutingNumUS = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingNumAU")]
        RoutingNumAU = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingNumNZ")]
        RoutingNumNZ = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingNumCN")]
        RoutingNumCN = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"Password")]
        Password = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicalEncryptedText")]
        MedicalEncryptedText = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicalEncryptedMemo")]
        MedicalEncryptedMemo = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"Age")]
        Age = 110,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"csv")]
        Csv = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jsonl")]
        Jsonl = 2,

    }

    /// <summary>
    /// Base service error contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class ServiceError
    {
        /// <summary>
        /// The message of the service error with any string arguments replaced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The name of the service error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorName { get; set; }

        /// <summary>
        /// Code number of the service error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// The raw message of the service error. This message may contain string replacement arguments (ie: {0}, {1}, etc) that map to the 'error_args' property and will be replaced when you get the full message from the 'message' property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("raw_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawMessage { get; set; }

        /// <summary>
        /// A list of arguments to be replaced in the raw message. Useful for when the message needs to be localized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_args", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<string> ErrorArgs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SqlDbType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BigInt")]
        BigInt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Bit")]
        Bit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Char")]
        Char = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Int")]
        Int = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Money")]
        Money = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NChar")]
        NChar = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NText")]
        NText = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NVarChar")]
        NVarChar = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Real")]
        Real = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UniqueIdentifier")]
        UniqueIdentifier = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SmallDateTime")]
        SmallDateTime = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SmallInt")]
        SmallInt = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SmallMoney")]
        SmallMoney = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Timestamp")]
        Timestamp = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TinyInt")]
        TinyInt = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"VarBinary")]
        VarBinary = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"VarChar")]
        VarChar = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Variant")]
        Variant = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"Udt")]
        Udt = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Structured")]
        Structured = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime2")]
        DateTime2 = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTimeOffset")]
        DateTimeOffset = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class SqlParameter
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        [Newtonsoft.Json.JsonProperty("sql_db_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SqlDbType? SqlDbType { get; set; }

        [Newtonsoft.Json.JsonProperty("is_dynamic_dependent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDynamicDependent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [ExcludeFromCodeCoverage]
    public partial class TestResult
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TestStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("execution_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 1,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625

